drop table if exists t0;
NOTICE:  table "t0" does not exist, skipping
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
drop table if exists part_t1;
NOTICE:  table "part_t1" does not exist, skipping
-- Row table t0 is used for cstore insertion.
create table t0 (a int, b int, c int, d int);
insert into t0 values (generate_series(1, 800, 1), generate_series(1, 800, 1), generate_series(1, 800, 1), generate_series(1, 800, 1));
create table t1 (a int, b int, c int, d int, primary key (a, b), unique (c)) with (orientation=column);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t1_pkey" for table "t1"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "t1_c_key" for table "t1"
\d t1
      Table "public.t1"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | not null
 b      | integer | not null
 c      | integer | 
 d      | integer | 
Indexes:
    "t1_pkey" PRIMARY KEY, cbtree (a, b) TABLESPACE pg_default
    "t1_c_key" UNIQUE CONSTRAINT, cbtree (c) TABLESPACE pg_default

drop table t1;
create table t1 (a int, b int, c int, d int) with (orientation=column);
alter table t1 add primary key (a, b);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "t1_pkey" for table "t1"
alter table t1 add unique (c);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "t1_c_key" for table "t1"
\d t1
      Table "public.t1"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | not null
 b      | integer | not null
 c      | integer | 
 d      | integer | 
Indexes:
    "t1_pkey" PRIMARY KEY, cbtree (a, b) TABLESPACE pg_default
    "t1_c_key" UNIQUE CONSTRAINT, cbtree (c) TABLESPACE pg_default

alter table t1 drop constraint t1_pkey;
alter table t1 drop constraint t1_c_key;
-- Fail. Unique index on cstore table can only be cbtree.
create unique index on t1 (a, b, c);
ERROR:  access method "psort" does not support unique indexes
-- Success
create unique index on t1 using cbtree (a, b, c);
drop table t1;
create table t1 (a int primary key, b int, c int, d int) with (orientation=column);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t1_pkey" for table "t1"
insert into t1 select * from t0 where a <= 100;
------------------- Fail. -----------------
insert into t1 values (1, 2, 3, 4);
ERROR:  duplicate key value violates unique constraint "t1_pkey"
DETAIL:  Key (a)=(1) already exists.
update t1 set a = 10 where a = 1;
ERROR:  duplicate key value violates unique constraint "t1_pkey"
DETAIL:  Key (a)=(10) already exists.
insert into t1 values (null, 1, 1, 1);
ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 1, 1, 1).
------------------- Success. -----------------------------
insert into t1 select * from t0 where a > 100 and a < 200;
-- (1, 1, 1, 1) -> (300, 1, 1, 1)
update t1 set a = 300 where a = 1;
insert into t1 values (1, 2, 3, 4);
alter table t1 drop constraint t1_pkey;
insert into t1 values (1, 3, 4, 5);
drop table t1;
-- Fail. Primary key must contain partition key.
CREATE TABLE part_t1(a int, b int, c int, d int, primary key (b, c)) with (orientatiON = column)
PARTITION BY RANGE (a)
(
    PARTITION P1 VALUES LESS THAN(200),
    PARTITION P2 VALUES LESS THAN(400),
    PARTITION P3 VALUES LESS THAN(600),
    PARTITION P4 VALUES LESS THAN(800)
);
ERROR:  Invalid PRIMARY KEY/UNIQUE constraint for partitioned table
DETAIL:  Columns of PRIMARY KEY/UNIQUE constraint Must contain PARTITION KEY
CREATE TABLE part_t1(a int, b int, c int, d int, primary key (a, b)) with (orientatiON = column)
PARTITION BY RANGE (a)
(
    PARTITION P1 VALUES LESS THAN(200),
    PARTITION P2 VALUES LESS THAN(400),
    PARTITION P3 VALUES LESS THAN(600),
    PARTITION P4 VALUES LESS THAN(800)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "part_t1_pkey" for table "part_t1"
-- Fail. Unqiue index on cstore table can only be cbtree.
create unique index on part_t1 (b, c);
ERROR:  Global partition index does not support column store.
-- Fail. Unique index on cstore_table can only be local index.
create unique index on part_t1 using cbtree (a, c);
ERROR:  Global partition index only support btree.
create unique index on part_t1 using cbtree (a, c) local;
\d part_t1
    Table "public.part_t1"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | not null
 b      | integer | not null
 c      | integer | 
 d      | integer | 
Indexes:
    "part_t1_pkey" PRIMARY KEY, cbtree (a, b) LOCAL(PARTITION p1_a_b_idx, PARTITION p2_a_b_idx, PARTITION p3_a_b_idx, PARTITION p4_a_b_idx)  TABLESPACE pg_default
    "part_t1_a_c_idx" UNIQUE, cbtree (a, c) LOCAL(PARTITION p1_a_c_idx, PARTITION p2_a_c_idx, PARTITION p3_a_c_idx, PARTITION p4_a_c_idx)  TABLESPACE pg_default
Range partition by(a)
Number of partition: 4 (View pg_partition to check each partition range.)

drop table part_t1;
CREATE TABLE part_t1(a int, b int, c int, d int) with (orientatiON = column)
PARTITION BY RANGE (a)
(
    PARTITION P1 VALUES LESS THAN(200),
    PARTITION P2 VALUES LESS THAN(400),
    PARTITION P3 VALUES LESS THAN(600),
    PARTITION P4 VALUES LESS THAN(800)
);
insert into part_t1 select * from t0 where a < 400;
insert into part_t1 values (1, 1, 2, 3);
-- Fail. Duplicate tuples: (1, 1, 1, 1), (1, 1, 2, 3)
alter table part_t1 add primary key (a, b);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "part_t1_pkey" for table "part_t1"
ERROR:  could not create unique index "part_t1_pkey"
DETAIL:  Key (a, b)=(1, 1) is duplicated.
delete from part_t1 where a = 1 and b = 1 and c = 2 and d = 3;
insert into part_t1 values (1, null, 3, 4);
-- Fail. Primary key must be not null.
alter table part_t1 add primary key (a, b);
ERROR:  column "b" contains null values
delete from part_t1 where b is null;
-- Success.
alter table part_t1 add primary key (a, b);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "part_t1_pkey" for table "part_t1"
------------------------ Fail. --------------------------------
insert into part_t1 values (1, null, 3, 4);
ERROR:  null value in column "b" violates not-null constraint
DETAIL:  Failing row contains (1, null, 3, 4).
update part_t1 set a = 1, b = 1 where a = 300 and b = 300;
ERROR:  duplicate key value violates unique constraint "part_t1_pkey"
DETAIL:  Key (a, b)=(1, 1) already exists.
insert into part_t1 select * from t0 where a > 100 and a < 300;
ERROR:  duplicate key value violates unique constraint "part_t1_pkey"
DETAIL:  Key (a, b)=(101, 101) already exists.
---------------------------------------------------------------
-- Success.
insert into part_t1 select * from t0 where a > 400 and a < 500;
drop table part_t1;
drop table t0;
